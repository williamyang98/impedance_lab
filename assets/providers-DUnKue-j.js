var g=Object.defineProperty;var d=(r,e,t)=>e in r?g(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var n=(r,e,t)=>d(r,typeof e!="symbol"?e+"":e,t);import{D as u}from"./index-DFtOOGi2.js";const w=r=>{switch(r){case"s8":return{size:1,getter:(e,t)=>e.getInt8(t),setter:(e,t,s)=>e.setInt8(t,s)};case"u8":return{size:1,getter:(e,t)=>e.getUint8(t),setter:(e,t,s)=>e.setUint8(t,s)};case"s16":return{size:2,getter:(e,t)=>e.getInt16(t,!0),setter:(e,t,s)=>e.setInt16(t,s,!0)};case"u16":return{size:2,getter:(e,t)=>e.getUint16(t,!0),setter:(e,t,s)=>e.setUint16(t,s,!0)};case"s32":return{size:4,getter:(e,t)=>e.getInt32(t,!0),setter:(e,t,s)=>e.setInt32(t,s,!0)};case"u32":return{size:4,getter:(e,t)=>e.getUint32(t,!0),setter:(e,t,s)=>e.setUint32(t,s,!0)};case"f32":return{size:4,getter:(e,t)=>e.getFloat32(t,!0),setter:(e,t,s)=>e.setFloat32(t,s,!0)};case"f64":return{size:8,getter:(e,t)=>e.getFloat64(t,!0),setter:(e,t,s)=>e.setFloat64(t,s,!0)}}};class _{constructor(e){n(this,"buffer");n(this,"view");n(this,"views");let t=0;const s={};for(const o in e){const a=e[o],f=w(a),c={offset:t,getter:f.getter,setter:f.setter};s[o]=c,t+=f.size}const i=t;this.buffer=new ArrayBuffer(i),this.view=new DataView(this.buffer),this.views=s}get(e){const t=this.views[e];return t.getter(this.view,t.offset)}set(e,t){const s=this.views[e];return s.setter(this.view,s.offset,t)}}function p(r,e){return r=Math.abs(r),e!==void 0&&r<=e?{scale:1,suffix:""}:r>=1e15?{scale:1e15,suffix:"P"}:r>=1e12?{scale:1e12,suffix:"T"}:r>=1e9?{scale:1e9,suffix:"G"}:r>=1e6?{scale:1e6,suffix:"M"}:r>=1e3?{scale:1e3,suffix:"k"}:r>=1?{scale:1,suffix:""}:r>=.001?{scale:.001,suffix:"m"}:r>=1e-6?{scale:1e-6,suffix:"Âµ"}:r>=1e-9?{scale:1e-9,suffix:"n"}:r>=1e-12?{scale:1e-12,suffix:"f"}:{scale:1,suffix:""}}function h(r,e,t,s){t=t??3;const i=p(r,s);return`${(r/i.scale).toPrecision(t)} ${i.suffix}${e??""}`}const l={get toast_manager(){const r=u("toast_manager");if(r===void 0)throw Error("Expected toast_manager to be injected from provider");return r},get gpu_device(){const r=u("gpu_device");if(r===void 0)throw Error("Expected gpu_device to be injected from provider");if(r.value===void 0)throw Error("gpu_device has not been initialised yet");return r},get gpu_adapter(){const r=u("gpu_adapter");if(r===void 0)throw Error("Expected gpu_adapter to be injected from provider");if(r.value===void 0)throw Error("gpu_adapter has not been initialised yet");return r}};export{_ as S,l as p,h as w};
